#+hugo_base_dir: ~/development/web/jslmorrison.github.io
#+hugo_section: posts
#+options: author:nil

* Api platform custom filters :symfony:api_platform:
:PROPERTIES:
:EXPORT_FILE_NAME: api-platform-custom-filters
:EXPORT_DATE: 2023-11-27
:END:
When not using entities as the api resources, in order to filter collections one or more custom filters can be applied to the classes annotated with the =[#ApiResource]= attribute.

#+hugo: more
Define a class as an =ApiResource= and annotate it with the desired filter(s), using the =[#ApiFilter]= attribute:
#+begin_src php :noeval
// src/ApiResource/ProductResource.php
<?php

declare(strict_types=1);

namespace App\ApiResource;

use App\Filter\ProductInStockFilter;
use ApiPlatform\Metadata\ApiFilter;
use ApiPlatform\Metadata\ApiResource;

[#ApiResource()]
[#ApiFilter(ProductInStockFilter::class)]
final class ProductResource
#+end_src

The custom filters should implement the =\ApiPlatform\Doctrine\Orm\Filter\FilterInterface=
#+begin_src php :noeval
<?php

declare(strict_types=1);

namespace App\Filter;

use Symfony\Component\HttpFoundation\Request;
use ApiPlatform\Doctrine\Orm\Filter\FilterInterface;

final class ProductInStockFilter implements FilterInterface
{
    public function apply(
        QueryBuilder $queryBuilder,
        QueryNameGeneratorInterface $queryNameGenerator,
        string $resourceClass,
        Operation $operation = null,
        array $context = [],
    ): void {
        if (!isset($context['filters']['product_in_stock'])) {
            return;
        }

        if ($context['filters']['product_in_stock'] === 'true') {
            $queryBuilder->andWhere('o.inStock > 1');
        }
    }

    // This function is only used to hook in documentation generators (supported by Swagger and Hydra)
    public function getDescription(string $resourceClass): array
    {
        return [
            'product_in_stock' => [
                'property' => 'inStock',
                'type' => 'bool',
                'required' => false,
            ],
        ];
    }
}
#+end_src

If utilising the default collection provider in your custom provider class then the query will be automatically altered to include the additional =andWhere= clause.
Alternatively you can conditionally add the logic to your database lookup (repository method) to apply in your provider.
